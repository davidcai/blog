<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tool on David Cai | Blog</title>
    <link>http://davidcai.github.io/blog/categories/tool/</link>
    <description>Recent content in Tool on David Cai | Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 19 Nov 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://davidcai.github.io/blog/categories/tool/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Atom Essential Packages</title>
      <link>http://davidcai.github.io/blog/posts/my-favorite-atom-editor-plugins/</link>
      <pubDate>Thu, 19 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://davidcai.github.io/blog/posts/my-favorite-atom-editor-plugins/</guid>
      <description>

&lt;p&gt;Atom &amp;ndash; the hackable editor coming from Github has been my favorite for web development. Like many other lightweight editors, Atom has a community-driven packages (plugins) marketplace that greatly enhanced the editor. I found the following Atom packages are essential to my web development workflow.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;project-manager:d55c2485435fe256bf1d0dbed34987bb&#34;&gt;Project-manager&lt;/h2&gt;

&lt;p&gt;This package is a lifesaver for people like me who often need to work with more than one projects. Project-manager saves your project in a registry. Switching to other saved projects is just one key shortcut away - &lt;code&gt;cmd + ctrl + p&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidcai.github.io/blog/img/project-manager.png&#34; alt=&#34;Project Manager&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;pigments:d55c2485435fe256bf1d0dbed34987bb&#34;&gt;Pigments&lt;/h2&gt;

&lt;p&gt;When it comes to styling, colors might be the most important factor. It will be nice to see the actual color defined by color values right in the editor. The Pigments package gives you just that. All color values will be decorated with a block of their correspondent colors in the same file. You have options to select different decoration styles. For me, &amp;ldquo;sqaure-dot&amp;rdquo; worked the best.&lt;/p&gt;

&lt;div class=&#34;img-og&#34;&gt;
  &lt;img src=&#34;http://davidcai.github.io/blog/img/pigments.png&#34;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;highlight-selected:d55c2485435fe256bf1d0dbed34987bb&#34;&gt;Highlight-selected&lt;/h2&gt;

&lt;p&gt;In Atom, I couldn&amp;rsquo;t find a way to highlight all occurrences that matches my current selection. For example, I selected &amp;ldquo;export&amp;rdquo; and would like to immediately see all &amp;ldquo;reports&amp;rdquo; are highlighted in the current file. I consider this basic functionality should be included in Atom but sadly it isn&amp;rsquo;t. Highlight-selected fixed that. You can choose to highlight the border or the background. The package even comes with two highlight colors - one for dark background, and the other for light.&lt;/p&gt;

&lt;div class=&#34;img-og&#34;&gt;
  &lt;img src=&#34;http://davidcai.github.io/blog/img/highlight-selected.png&#34;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;editorconfig:d55c2485435fe256bf1d0dbed34987bb&#34;&gt;EditorConfig&lt;/h2&gt;

&lt;p&gt;Have you suffered from other developers&amp;rsquo; bad habits of using a mix of tabs, spaces, charset, trailing white spaces and lines? EditorConfig.org created a standard to promote a consistent coding styles between different editors and IDEs. Their website maintained &lt;a href=&#34;http://editorconfig.org/#download&#34;&gt;a list of plugins&lt;/a&gt; that support this standard. All you need to do is to define a &lt;code&gt;.editorconfig&lt;/code&gt; file at the root of your project, and download the plugin. Then, your editor will recognize &lt;code&gt;.editorconfig&lt;/code&gt; and start to apply the styles.&lt;/p&gt;

&lt;p&gt;Here is an example of .editorconfig file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# http://editorconfig.org
root = true

[*]
indent_style = space
indent_size = 2
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

[*.md]
trim_trailing_whitespace = false

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;tabs-to-spaces:d55c2485435fe256bf1d0dbed34987bb&#34;&gt;Tabs-to-spaces&lt;/h2&gt;

&lt;p&gt;I found editorconfig itself is not enough to convert all tab indentations to spaces. I had to use this tabs-to-spaces package for that. Like the name suggested, this package transforms all tabs indentations to spaces, or vice versa. In the package&amp;rsquo;s setting UI, you have the option to choose &amp;ldquo;none&amp;rdquo;, &amp;ldquo;tabify&amp;rdquo;, and &amp;ldquo;untabify&amp;rdquo;. &amp;ldquo;none&amp;rdquo; does nothing; &amp;ldquo;tabify&amp;rdquo; changes indentations in spaces to tabs; and &amp;ldquo;untabify&amp;rdquo; does the opposite - replacing tabs with spaces.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;linter-and-linter-eslint:d55c2485435fe256bf1d0dbed34987bb&#34;&gt;Linter and linter-eslint&lt;/h2&gt;

&lt;p&gt;For hobby projects, you might don&amp;rsquo;t care about linting. However, for me, even hobby projects could use some code static analysis. linter and linter-eslint shout out loud whenever (most of the time) I make syntax mistakes. They saved me tons of time that would have been wasted in JavaScript debugging.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidcai.github.io/blog/img/eslint.png&#34; alt=&#34;Eslint&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;themes:d55c2485435fe256bf1d0dbed34987bb&#34;&gt;Themes&lt;/h2&gt;

&lt;p&gt;No matter how bad our art taste are, we developers do care about our color themes in editor, don&amp;rsquo;t we? Since this is a very subjective area, I will leave the theme picking to yourself. However, here I just want to shamelessly introduce to you my own syntax theme majorly emphasizing on green, brown, white, and blue, designed for web app coding - the theme color for Druids in World of Warcraft, hence the name.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidcai.github.io/blog/img/emerald-dream.png&#34; alt=&#34;Emerald Dream Syntax&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This theme is not published as an Atom package yet, however, you can still get it from Github:
&lt;a href=&#34;https://github.com/davidcai/emerald-dream-syntax&#34;&gt;https://github.com/davidcai/emerald-dream-syntax&lt;/a&gt;. Git clone to ~/.atom/packages/ directory, reload Atom, and then select Emerald Dream from the syntax themes dropdown list. This syntax theme works best with Atom Material UI theme.&lt;/p&gt;

&lt;p&gt;Well, Emerald Dream or not, choose your own theme. The point is to make your editor more pleasant and effective.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s use NVM</title>
      <link>http://davidcai.github.io/blog/posts/lets-use-nvm/</link>
      <pubDate>Sun, 14 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://davidcai.github.io/blog/posts/lets-use-nvm/</guid>
      <description>

&lt;p&gt;My colleague just came to me with a troubled face. He couldn&amp;rsquo;t figure out why his gulp script failed to start up local server where everyone else is able to do so. After a short debugging session, I found that the culprit is Node JS version. Certainly, our gulp scripts have a conflict with the latest Node JS. Now, my colleague has to downgrade his Node JS installation, or does he have to? :)&lt;/p&gt;

&lt;p&gt;In this fast-moving industry, maintaining specific versions for your libraries or tools seems to be a chore. That&amp;rsquo;s why there are so many xyz managers, e.g. pip, apt-get, bower, npm, jspm, and homebrew, etc. For managing versions of Node JS, there is NVM - Node Version Manager. I highly recommend using it to have better controls of which version of Node I use.&lt;/p&gt;

&lt;p&gt;If you already installed Node via other installers, it&amp;rsquo;s better to completely remove the existing Node and NPM. To do that, I stole the following command from this stackoverflow thread - &lt;a href=&#34;http://stackoverflow.com/questions/11177954/how-do-i-completely-uninstall-node-js-and-reinstall-from-beginning-mac-os-x&#34;&gt;How do I completely uninstall Node.js, and reinstall from beginning (Mac OS X)&lt;/a&gt;. Here are the commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lsbom -f -l -s -pf /var/db/receipts/org.nodejs.pkg.bom | while read f; do  sudo rm /usr/local/${f}; done

sudo rm -rf /usr/local/lib/node /usr/local/lib/node_modules /var/db/receipts/org.nodejs.*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That should remove all Node JS and NPM from Mac OS X. Now let&amp;rsquo;s install NVM. As of June 2015, the following might be the easiest command to install NVM:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.25.4/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note: It&amp;rsquo;s always safe to check if &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;NVM&lt;/a&gt; updated their installation command.)&lt;/p&gt;

&lt;p&gt;The install.sh script will insert a few lines to ~/.bashrc, however, Mac OS X for some reason won&amp;rsquo;t source ~/.bashrc (&lt;a href=&#34;http://apple.stackexchange.com/questions/119711/why-mac-os-x-dont-source-bashrc&#34;&gt;see details&lt;/a&gt;). So we have to copy the inserted lines to ~/.bash_profile instead:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Node version manager
export NVM_DIR=&amp;quot;/Users/your_username/.nvm&amp;quot;
[ -s &amp;quot;$NVM_DIR/nvm.sh&amp;quot; ] &amp;amp;&amp;amp; . &amp;quot;$NVM_DIR/nvm.sh&amp;quot;  # This loads nvm​​​
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change your_username to your home dir name. After sourcing ~/.bash_profile, NVM will be loaded and ready to use.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s install Node JS, for example, version 0.10.38:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvm install 0.10.38
nvm use 0.10.38
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Type &lt;code&gt;node -v&lt;/code&gt; to check if the correct version is installed and in use.&lt;/p&gt;

&lt;p&gt;Node 0.10.38 is installed. However, it will be a bit tedious to type &lt;code&gt;nvm use 0.10.38&lt;/code&gt; to switch to that version every time a terminal session starts. To fix that, I assign &amp;lsquo;default&amp;rsquo; as an alias to v0.10.38:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvm alias default 0.10.38
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Versions tied to the &amp;lsquo;default&amp;rsquo; alias will be the default active version.&lt;/p&gt;

&lt;p&gt;You are free to install many versions of Node JS with NVM. For instance, here we install the stable version (0.12.4 as of June 2015):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvm install stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To list all installed Node Js, and see which one is active, use the &lt;code&gt;nvm ls&lt;/code&gt; command:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidcai.github.io/blog/img/nvm-ls.png&#34; alt=&#34;nvm ls&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The command reports that I have v0.10.38 and v0.12.4 installed. The current active version is 0.10.38. I have four aliases - default, node, sable, and iojs. Aliases can refer to other aliases. In this example, node refers stable, and stable refers 0.12.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion:873ad2aa58948dc097de69876bea24cc&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Managing versions is crucial but tedious. The task should be automated. NVM helps us manage multiple Node Js versions without a sweat. It becomes much easy to work in a working version, and try something new in the latest version. All I have to do is &lt;code&gt;nvm use default&lt;/code&gt; and &lt;code&gt;nvm use stable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And a side benefit is that I don&amp;rsquo;t have to &lt;code&gt;sudo npm install&lt;/code&gt; any more. Just &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>